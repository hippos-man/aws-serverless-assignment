service: userservice

frameworkVersion: '2'

plugins:
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}

custom:
  tableName: usersTable
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # migration:
    #   dir: offline/migrations

functions:
  populateUsers:
    handler: lambdas/endpoints/populateUsers.handler
    description: Populate Users DynamoDB table with dummy user contact cards.
    events:
      - httpApi:
          path: /users
          method: POST

  queryUsers:
    handler: lambdas/endpoints/getUsers.handler
    description: Query user cards with filtering conditions.
    events:
      - httpApi:
          path: /users
          method: GET
          request:
            parameters:
              querystrings:
                email: true
  # TEST ONLY
  scanUsers:
    handler: lambdas/endpoints/scanUsers.handler
    description: Scan users table for test purpose.
    events:
      - httpApi:
          path: /user-list
          method: GET
    

resources:
  Resources:
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: N
          - AttributeName: departmentName
            AttributeType: S
          - AttributeName: fullName
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: departmentIndex
            KeySchema:
              - AttributeName: departmentName
                KeyType: HASH
              - AttributeName: fullName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST